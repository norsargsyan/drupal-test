<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_page_attachments().
 */
function calibrate_core_page_attachments(array &$attachments) {
//  $node = Node::load(19);
//  if ($node->isTranslatable()) {
//    foreach (Drupal::languageManager()->getLanguages() as $code => $language) {
//      if (!$node->hasTranslation($code)) {
//        $translation = $node->addTranslation($code, ['title' => $node->getTitle()]);
//        $node->save();
//      }
//    }
//  }
}

/**
 * Implements hook_install().
 */
function calibrate_core_install($is_syncing) {
  $client = Drupal::httpClient();
  $response = $client->request('GET', 'http://country.io/names.json');

  if ($response->getStatusCode() === 200) {
    $countries = json_decode($response->getBody(), TRUE);

    $i = 0;
    if (!empty($countries)) {
      foreach ($countries as $country) {
        $i++;
        // Create or update the taxonomy term.
        $query = Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->getQuery();

        $query->condition('name', $country)->condition('vid', 'countries')->accessCheck(FALSE);

        $result = $query->execute();

        if (!$result) {
          $term = Term::create([
            'vid' => 'countries',
            'name' => $country,
          ]);

          // Save the term.
          $term->save();
        }
      }

      Drupal::messenger()
        ->addMessage(t('@count countries are created.', ['@count' => $i]));

    }
  }
}

/**
 * Implements hook_uninstall().
 */
function calibrate_core_uninstall($is_syncing) {
  $client = Drupal::httpClient();
  $response = $client->request('GET', 'http://country.io/names.json');

  if ($response->getStatusCode() === 200) {
    $countries = json_decode($response->getBody(), TRUE);

    if (!empty($countries)) {
      // Create or update the taxonomy term.
      $query = Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->getQuery();

      $query->condition('vid', 'countries')
        ->condition('name', $countries, 'IN')
        ->accessCheck(FALSE);

      $result = $query->execute();

      $terms = Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadMultiple($result);

      foreach ($terms as $term) {
        $term->delete();
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function calibrate_core_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'office_articles') {
    if (isset($view->argument['field_article_offices_target_id'])) {
      $office_id = $view->argument['field_article_offices_target_id']->value[0];

      $office = Node::load($office_id);

      $view_title = str_replace('{country}', $office->field_office_country->entity->getName(), $view->getTitle());
      $view->setTitle($view_title);
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function calibrate_core_views_pre_build(ViewExecutable $view) {
  if (!$view->preview) {
    if ($view->id() == 'news' && $view->current_display == 'related_news') {
      /** @var Node $news */
      $news = Drupal::routeMatch()->getParameter('node');
      $categories = $news->field_news_category->getValue();
      $categories = array_column($categories, 'target_id');
      $tags = $news->field_tags->getValue();
      $tags = array_column($tags, 'target_id');
      $view->setArguments([implode('+', $categories), implode('+', $tags), $news->id()]);
      // Exclude the current node from the view results.
//      $view->getQuery()->addWhere('AND', 'node_field_data.nid <> :current_node_id', [':current_node_id' => ]);
      //    if (isset($view->argument['field_article_offices_target_id'])) {
      //      $office_id = $view->argument['field_article_offices_target_id']->value[0];
      //
      //      $office = Node::load($office_id);
      //
      //      $view_title = str_replace('{country}', $office->field_office_country->entity->getName(), $view->getTitle());
      //      $view->setTitle($view_title);
      //    }
    }
    if ($view->id() == 'articles' && $view->current_display == 'related_articles') {
      /** @var Node $news */
      $article = Drupal::routeMatch()->getParameter('node');
      $office = $article->field_article_offices->target_id;
      $tags = $article->field_tags->getValue();
      $tags = array_column($tags, 'target_id');
      $view->setArguments([$office, implode('+', $tags), $article->id()]);
    }
  }
}

/**
 * Implements hook_preprocess().
 */
/**
 * Implements hook_preprocess_HOOK().
 */
function calibrate_core_preprocess_views_view_field(&$variables) {
  /** @var ViewExecutable $view */
  $view = $variables['view'];
  if (($view->id() == 'news' && $view->current_display == 'news') ||
    ($view->id() == 'news' && $view->current_display == 'latest_news') ||
    ($view->id() == 'search_articles' && $view->current_display == 'articles') ||
    ($view->id() == 'articles' && $view->current_display == 'latest_articles')) {
    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
    $field = $variables['field'];
    if ($field->field == 'field_content') {
      $content = '';
      foreach ($variables['row']->_entity->field_content->referencedEntities() as $referencedEntity) {
        if ($referencedEntity->bundle() == 'text') {
          $content = views_ui_truncate(strip_tags($referencedEntity->field_text->value), 90);
          break;
        }
      }
      $variables['output'] = ['#markup' => $content];
    }

  }
}


/**
 * Implements hook_theme().
 */
function calibrate_core_theme($existing, $type, $theme, $path) {
  return [
    'field__article_country' => [
      'variables' => [
        'label' => NULL,
        'content' => NULL,
      ],
    ],
    'banner_block' => [
      'variables' => [
        'image' => NULL,
        'text' => '',
      ]
    ]
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function calibrate_core_node_insert(NodeInterface $node) {
  if ($node->isTranslatable()) {
    foreach (Drupal::languageManager()->getLanguages() as $code => $language) {
      if (!$node->hasTranslation($code)) {
        $node->addTranslation($code, ['title' => $node->getTitle()]);
        $node->save();
      }
    }
  }
}

/**
 * Implements hook_update_N().
 */
function calibrate_core_update_10001(&$sandbox) {
  $query = Drupal::entityQuery('node');
  $result = $query->condition('type', ['article', 'news', 'offices'], 'IN')
    ->accessCheck(FALSE)->execute();
  $nodes = Node::loadMultiple($result);

  foreach ($nodes as $node) {
    if ($node->isTranslatable()) {
      foreach (Drupal::languageManager()->getLanguages() as $code => $language) {
        if (!$node->hasTranslation($code)) {
          $node->addTranslation($code, ['title' => $node->getTitle()]);
          $node->save();
        }
      }
    }
  }
}
